---
openapi: 3.0.3
############################################################################
#                                     API info                             #
############################################################################
info:
  title: Energy Footprint Notification
  description: |
    ## Overview
    The Energy Footprint Notification (EFN) API provides the API Consumer
    with information about E2E energy consumption and carbon footprint of a service.
    ## Introduction
    The Energy Efficiency scenario foresees a Service provided by a system
    composed by many components instantiated and running in different locations,
    in the Public or Private Cloud or at the Edge. Some of those components are Applications
    onboarded by the Service Provider (or by an Application Developer) in a 
    distributed infrastructure managed by an Operator. The Service therefore
    leverages on many instances of that Application running in different 
    geographical locations, for example on Edge Data Centers.  The EFN API 
    provides the Service    Provider with the information about the E2E energy consumption and carbon footprint (greenhouse gasses emissions) of the Application instances hosted by the Operator. The reported energy consumption and carbon footprint consider the energy used to run the Application instances in the Data Centers and the energy absorbed along the network to provide the Service
    (e.g., RAN and Core Network energy consumption).\
    \
    **Example use case and flow:**\
    \
    Summary: A Service Provider has requested the Telco Platform to instantiate an Application in
    different Edge Data Centers. These application instances, altogether, provide a
    Service offered to End User via a mobile network. The Service Provider wants to
    be informed about the E2E energy consumption and carbon footprint of its Service.
    A system from the Service Provider invokes the Energy Footprint Notification
    API to get the above-mentioned information. The reported energy consumption
    and carbon footprint consider the energy used to run the Application instances
    in the Data Centers and the energy consumption along the network to provide
    the Service (e.g., RAN and Core Network consumption).\
    \
    Roles, Actor(s) and scope:
    - Service Provider: Owner of the Service on owner of the External System 
    invoking the ENF API.
    - External System: EFN API Consumer
    - Telco Platform (TP): EFN API Producer
    - End Users: consumers of the Service\

    Pre-conditions: The Application Instances are running and the Service is 
    used by the End Users.\
    \
    Begins when: The External System, as API Consumer, invokes the EFN API 
    exposed by the TP as API Producer.\
    \
    Steps:
    - 1: The External System is authenticated by the TP to grant access to the
    EFN API. If the access is granted the following steps are followed.
    - 2: The External System invokes the EFN API to get the overall energy 
    consumption by an application in a certain period of time. The External 
    System also provides the AFN API Producer with a callback endpoint to 
    get the result of the energy consumption analysis when available.
    - 3: The EFN API Producer provides feedback for the request acquisition
    - 4: The EFN API Producer make an analysis on the stored data for the 
    energy consumption of the Service leveraging on the selected application,
    considering all the related instances active in the identified period of
    time.\
    \
    **The parameters of the EFN API are:**\
    \
    **TargetRequest:**
    Provides to the API Producer the information about the target Application and the period of time of interest.\
    \
    **EnergyResponse:**
    Provides to the API Consumer the information about the energy consumption for the target Application, considering all the active instances, in the period of time of interest.\
    \
    **CarbonFootprintResponse:**
    Provides to the API Consumer the information about the carbon footprint for the target Application, considering all the active instances, in the period of time of interest.
    # Authorization and authentication
    The "Camara Security and Interoperability Profile" provides details on how
    an API consumer requests an access token. Please refer to Identify and
    Consent Management
    (https://github.com/camaraproject/IdentityAndConsentManagement/)
    for the released version of the profile.\
    \
    The specific authorization flows to be used will be agreed upon during
    the onboarding process, happening between the provider of the application
    consuming the API and the operator's API exposure platform, taking into
    account the declared purpose for accessing the API, whilst also being
    subject to the prevailing legal framework dictated by local legislation.\
    \
    In cases where personal data is processed by the API and users can
    exercise their rights through mechanisms such as opt-in and/or opt-out,
    the use of three-legged access tokens is mandatory. This ensures that
    the API remains in compliance with privacy regulations, upholding the
    principles of transparency and user-centric privacy-by-design.
    ## API Documentation
    ## Details
    The Energy Footprint Notification (EFN) API provides, to the API Consumer
    , information about the E2E energy consumption and carbon footprint for a specified
    service
    that is provided by a certain number of active instances of an application. The API
    provides information about the energy consumption of the many active instances of
    the application providing the service. The application instances that are monitored
    for their energy consumption are the one managed by the Operator and that run on top
    of the Operator’s infrastructure. The service is deployed and managed via the Telco Platform, for
    this reason the Telco Platform is aware of all the active instances supporting that service
    and it is also aware of the energy consumption in the Data Centers hosting the
    application instances providing the service. RAN and Core Network are deeply
    involved in the service provisioning, so their energy consumption is relevant
    to have and E2E comprehensive view. The Service Provider activates a service using
    the Operator Platform to instantiate and activate the application supporting that
    service in different Edge Data Centers. The Service Provider onboards the Application,
    deploys and activates some instances to enable the service. Service customers use
    their smartphone di access the service. The use of the service produces an energy
    consumption alongside the Network and on the Data Centers hosting the application
    instances. The EFN API is used by a Service Provider to be aware of the E2E energy
    consumption of his services. The Service Provider, via an EFN API Consumer,
    invokes the EFN API with an identifier for the target Application. A period of
    time can be specified. The EFN API provides back the energy consumption by the
    service in that period of time as cumulative value and with the details of the
    energy consumption by the RAN, the Core Network and the Data Centers.  The EFN
    API also provides back the carbon footprint because of the usage of the service.
    The EFN API is an intent based API that can be invoked expressing the following
    intent “What was the energy consumption from a Service in this period of time?”.
    The period of time can be recent, up to now, to verify the current energy
    consumption from the service or it can be in the past. The EFN API provides to the
    API Consumer an aggregated information on the service energy consumption, in the
    specified period of time, expressed in Kw/h and the carbon footprint, expressed in
    tonnes of emitted greenhouse gasses.
    The API Consumer request for an information (e.g. the energy consumption for
    a service) and it is notified back by the API Producer with the requested 
    information.\
    \
    The EFN API supports the following Intents:
    - Intent1: Which is the overall energy consumption for my service in this period of time?
    - Intent2: Which is the energy consumption to host my service in this period of time?
    - Intent3: Which is the overall carbon footprint for my service in this period of time?
    - Intent4: Which is the carbon footprint to host my service in this period of time?\
    \
    The input for the above intents is:
    - Input_Intent1: Application Identifier and period of time.
    - Input_Intent2: Application Identifier and period of time.
    - Input_Intent3: Application Identifier and period of time.
    - Input_Intent4: Application Identifier and period of time.\
    \
    The output for the above intents is:
    - Output_Intent1: energy consumption in Kw/h.
    - Output_Intent2: energy consumption in Kw/h.
    - Output_Intent3: greenhouse gasses emission in tonnes.
    - Output_Intent4: greenhouse gasses emission in tonnes.\
    \
    The related endpoints are:
    - Intent1: /overall-energy-consumption
    - Intent2: /dc-energy-consumption
    - Intent3: /overall-carbon-footprint
    - Intent4: /dc-carbon-footprint
    ## FAQ's
    (FAQs will be added in a later version of the documentation)
    ## Release Notes
    First draft for the EFN API.
  version: 0.1.0-alpha.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-camara-commonalities: 0.5.0
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/TBD
############################################################################
#                                     Servers                              #
############################################################################
servers:
  - url: "{apiRoot}/ipcei/energy-footprint-notification/v0.1.0-alpha.1"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root for the Energy Footprint Notification API
security:
- notificationsBearerAuth: []
############################################################################
#                                     Tags                                #
############################################################################
tags:
  - name: Energy consumption information retrieval
    description: Request information on the energy consumption of the service.
  - name: Carbon footprint information retrieval
    description: Request information on the carbon footprint for the service.
  - name: Energy consumption Callback Operation 
    description: callback to provide the energy consumption data to the API 
     Consumer
  - name: Carbon footprint Callback Operation 
    description: callback to provide the energy consumption data to the API 
     Consumer     
############################################################################
#                                     Paths                                #
############################################################################
paths:
  /overall-energy-consumption:
    post:
      tags:
        - Energy consumption information retrieval
      summary: Provides the overall Energy Consumption for the target Application instances in a certain period of time.
      description: Receives as input an object containing the intents from the
       API Consumer and provides back the energy consumption with a callback.
      operationId: retrieveoverallenergyconsumption
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - oAuth2:
            - 'energy-footprint-notification:overall-energy-consumption:write'
            - 'energy-footprint-notification:overall-energy-consumption:read'
      requestBody:
        description: Defines the application that provides the service and the
         time period under analysis.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetRequest'
      responses:
        '201':
          description: The request has been acquired. The request identifier is
           returned.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
            Location:
              description: Link to the created resource
              schema:
                type: string
                description: Link to the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequest'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic401"
        "404":
          $ref: "#/components/responses/Generic404"
      callbacks:
        onEnergyConsumption:
          $ref: "#/components/callbacks/onEnergyConsumptionCalculation"
  /dc-energy-consumption:
    post:
      tags:
        - Energy consumption information retrieval
      summary: Retrieves the Energy Consumption of the resources of the Data 
       Centers supporting the target Application instances in a certain period of time.
      description: Receives as input an object containing the intents from the
       API Consumer and provides back the energy consumption with a callback.
      operationId: retrievedcenergyconsumption
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - oAuth2:
            - 'energy-footprint-notification:dc-energy-consumption:write'
            - 'energy-footprint-notification:dc-energy-consumption:read'
      requestBody:
        description: Defines the application that provides the service and the
         time period under analysis.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetRequest'
      responses:
        '201':
          description: The request has been acquired. The request identifier is
           returned.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
            Location:
              description: Link to the created resource
              schema:
                type: string
                description: Link to the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequest'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic401"
        "404":
          $ref: "#/components/responses/Generic404"
      callbacks:
        onEnergyConsumption:
          $ref: "#/components/callbacks/onEnergyConsumptionCalculation"
  /overall-carbon-footprint:
    post:
      tags:
        - Carbon footprint information retrieval
      summary: Retrieves the overall carbon footprint for the target Application instances in a certain period of time.
      description: Receives as input an object containing the intents from the
       API Consumer and provides back the carbon footprint with a callback.
      operationId: retrieveoverallcarbonfootprint
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - oAuth2:
            - 'energy-footprint-notification:overall-carbon-footprint:write'
            - 'energy-footprint-notification:overall-carbon-footprint:read'
      requestBody:
        description: Defines the application that provides the service and the
         time period under analysis.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetRequest'
      responses:
        '201':
          description: The request has been acquired. The request identifier is
           returned.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
            Location:
              description: Link to the created resource
              schema:
                type: string
                description: Link to the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequest'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic401"
        "404":
          $ref: "#/components/responses/Generic404"
      callbacks:
        onCarbonFootprintCalculation:
          $ref: "#/components/callbacks/onCarbonFootprintCalculation"
  /dc-carbon-footprint:
    post:
      tags:
        - Carbon footprint information retrieval
      summary: Retrieves the carbon footprint of the resources of the Data 
       Centers supporting the target Application instances in a certain period of time.
      description: Receives as input an object containing the intents from the
       API Consumer and provides back the energy consumption with a callback.
      operationId: retrievedccarbonfootprint
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - oAuth2:
            - 'energy-footprint-notification:dc-energy-consumption:write'
            - 'energy-footprint-notification:dc-energy-consumption:read'
      requestBody:
        description: Defines the application that provides the service and the
         time period under analysis.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetRequest'
      responses:
        '201':
          description: The request has been acquired. The request identifier is
           returned.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
            Location:
              description: Link to the created resource
              schema:
                type: string
                description: Link to the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetRequest'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic401"
        "404":
          $ref: "#/components/responses/Generic404"
      callbacks:
        onEnergyConsumption:
          $ref: "#/components/callbacks/onCarbonFootprintCalculation"
############################################################################
#                                 Components                               #
############################################################################
components:
  securitySchemes:
    oAuth2:    
      type: oauth2
      description: This API uses OAuth 2 [More info](https://api.example.com/docs/auth)
      flows:        
        clientCredentials:
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            'energy-footprint-notification:overall-energy-consumption:read': 
              Grants access to read-only data in the Energy resources
            'energy-footprint-notification:overall-energy-consumption:write': 
              Grants write access to the Energy resources
            'energy-footprint-notification:dc-energy-consumption:read': 
              Grants access to read-only data in the Energy resources
            'energy-footprint-notification::dc-energy-consumption:write': 
              Grants write access to the Energy resources
            'energy-footprint-notification:overall-carbon-footprint:read':
              Grants access to read-only data in the Carbon Footprint resources
            'energy-footprint-notification:overall-carbon-footprint:write':
              Grants access to read-only data in the Carbon Footprint resources
            'energy-footprint-notification:dc-carbon-footprint:read':
              Grants access to read-only data in the Carbon Footprint resources
            'energy-footprint-notification:dc-carbon-footprint:write':
              Grants access to read-only data in the Carbon Footprint resources
    notificationsBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#/sinkCredential.credentialType}"              
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  #########################################################################
  #                             Events/Callbacks                          #
  #########################################################################
  callbacks:
    onEnergyConsumptionCalculation:
      # when data is sent, it will be sent to the callback url provided
      '{$request.body.notificationSink.sink}':
        post:
          tags:
            - Energy consumption Callback Operation
          summary: Provides back the result of the analysis on the energy 
           consumption
          description: once the system as calculated the energy consumption of 
           the service, this information is provided back to the API Consumer
          operationId: EnergyConsumptionNotification
          parameters:
            - $ref: '#/components/parameters/x-correlator'
          security:
          - notificationsBearerAuth: []
          requestBody:
            description: payload containing the calculated energy consumption
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CloudEventEnergy'
          responses:
            '202':
              description: Your server implementation should return this HTTP
                status code if the data was received successfully
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'
            '204':
              description: Your server should return this HTTP status code if
               no longer interested in further updates
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'  
    onCarbonFootprintCalculation:
      # when data is sent, it will be sent to the callback url provided
      '{$request.body.notificationSink.sink}':
        post:
          tags:
            - Carbon footprint Callback Operation
          summary: Provides back the result of the analysis on the carbon footprint
          description: once the system as calculated the carbon footprint of 
           the service, this information is provided back to the API Consumer
          operationId: EnergyConsumptionNotification
          parameters:
            - $ref: '#/components/parameters/x-correlator'
          security:
          - notificationsBearerAuth: []            
          requestBody:
            description: payload containing the calculated energy consumption
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CloudEventCarbonFootprint'
          responses:
            '202':
              description: Your server implementation should return this HTTP
                status code if the data was received successfully
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'
            '204':
              description: Your server should return this HTTP status code if
               no longer interested in further updates
              headers:
                x-correlator:
                  $ref: '#/components/headers/x-correlator'                          
  ############################################################################
  #                                 Resources                                #
  ############################################################################
  schemas:
    NotificationSink:
      description: ""
      type: object
      required:
        - sink
      properties:
        sink:
          description: 'https callback address where the notification must be POST-ed'
          type: string
        sinkCredentials:
          description: Sink credential provides authorization information necessary to enable delivery of events to a target
          type: object
          properties:
            credentialtype:
              type: string
              description: Type of the credential - MUST be set to ACCESSTOKEN for now
              enum:
                - "ACCESSTOKEN"
            accessToken:
              type: string
              description: Access Token granting access to the POST operation to create notification
            accessTokenExpireUtc:
              type: string
              format: date-time
              description: An absolute UTC instant at which the access token shall be considered expired.
            accessTokenType:
              type: string
              description: Type of access token - MUST be set to bearer for now
              enum:
                - "bearer"
    TargetRequest:
      description: resource containing the Application under analysis and the callback information for the API Consumer to be notified with the results of the analysis. If no "TimePeriod" is provided the analysis is performed from the
       activation of the first instance of the Application.
      type: object
      properties:
        AppId:
          type: string
          format: uuid
          example: "6B29FC40-CA47-1067-B31D-00DD010662DA"
          description: A globally unique identifier associated with the application.
           The Telco Platform generates this identifier when the application is submitted over the NBI.
        TimePeriod:
         properties:
          startDate:
           type: string
           format: date-time
           description: An instant of time, starting of the TimePeriod.
          endDate:
           type: string
           format: date-time
           description: An instant of time, ending of the TimePeriod. If not included, then the period has no ending date.
         required:
          - startDate
        notificationSink:
          $ref: '#/components/schemas/NotificationSink'    
        RequestID:
          type: string
          description: Identifier for the request. This
           parameter is returned by the API and must be used to update it.
          readOnly: true 
      required:
        - AppId
        - notificationSink
        - notificationAuthToken
    DateTime:
      type: string
      format: date-time
      description: |
        Timestamp of when the occurrence happened. Must adhere to RFC 3339. 
        WARN: This optional field in CloudEvents specification is required in CAMARA APIs implementation.
      example: '2018-04-05T17:31:00Z'
    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened - be a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"
    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - time
      properties:
        id:
          type: string
          description: identifier of this event, that must be unique in the source context.
          minLength: 1
        source:
          $ref: '#/components/schemas/Source'
        type:
          type: string
          description: 'type of event as defined in each CAMARA API'
          example: 'org.camaraproject.iot.dta-status-changed-event'
          minLength: 25
        specversion:
          type: string
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          enum:
            - "1.0"
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          enum:
            - application/json
        time:
          $ref: "#/components/schemas/DateTime"      
    CloudEventEnergy:
      description: provides back the energy consumption for the Service. The result
       of the analysis is a floating point number. The unit of measure is 
       Kw/h.
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
      properties:
        RequestID:
          type: string
          description: Identifier for the request. This
           parameter correlates this response with the request.
          readOnly: false
        EnergyConsumption:
          type: number
          format: float
          example: 12.345
          description: the  energy consumption for alle the instances of the service. The API is asynchronous, for this reason the value will be returned back via a callback
    CloudEventCarbonFootprint:
      description: provides back the carbon footprint of the Service. The result
       of the analysis is a floating point number. The unit of measure is 
       tonnes.
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
      properties:
        RequestID:
          type: string
          description: Identifier for the request. This
           parameter correlates this response with the request.
          readOnly: false
        CarbonFootprint:
          type: number
          format: float
          example: 12.345
          description: the  carbon footprint for alle the instances of the service. The API is asynchronous, for this reason the value will be returned back via a callback          
    ############################################################################
    #                                 Responses                                #
    ############################################################################
    ErrorInfo:
      description: error information
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or
                  query param.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
                      - AUTHENTICATION_REQUIRED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or
                  expired credentials.
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: New authentication is needed, authentication is no
                longer valid
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have
                the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform
                  this action.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - UNKNOWN_APPLICATION_IDENTIFIER
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Application Identifier unknown
              value:
                status: 404
                code: UNKNOWN_APPLICATION_IDENTIFIER
                message: the target application is unknown.
    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided
                identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the
                  provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: the Application Identifier is not included in the
                request
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: unspecified Application Identifier.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Either out of resource quota or reaching rate limiting.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: API Server request limit is overpassed
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Either out of resource quota or reaching rate limiting.
